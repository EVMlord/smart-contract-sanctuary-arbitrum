// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title Storage
 * @notice This contract has been automatically generated by SolidQuery 0.2.0.
 * It represents a structured, on-chain database that includes CRUD operations,
 * on-chain indexing capabilities, and getter and setter functions where applicable.
 * It is tailored to a specific schema, provided as input in a YAML format.
 * For detailed function descriptions and specific structure, please refer to the function
 * and struct level comments within the contract.
 * @dev For more information on SolidQuery, please visit our GitHub repository.
 * https://github.com/KenshiTech/SolidQuery
 */
contract Storage is Context, Ownable {
    struct StakeProgram {
        bool active;
        uint256 rewards;
        uint256 duration;
    }

    struct Stake {
        address user;
        uint256 unlock;
        uint256 amount;
        uint256 rewards;
        uint256 program;
        uint256 nftId;
        bool claimed;
        bool hasNft;
    }

    uint256 private stakeProgramCounter = 0;
    uint256 private stakeCounter = 0;

    event StakeProgramCreated(
        uint256 id,
        bool active,
        uint256 rewards,
        uint256 duration
    );
    event StakeProgramUpdated(
        uint256 id,
        bool active,
        uint256 rewards,
        uint256 duration
    );
    event StakeProgramDeleted(uint256 id);

    event StakeCreated(
        uint256 id,
        address user,
        uint256 unlock,
        uint256 amount,
        uint256 rewards,
        uint256 program,
        uint256 nftId,
        bool claimed,
        bool hasNft
    );
    event StakeUpdated(
        uint256 id,
        address user,
        uint256 unlock,
        uint256 amount,
        uint256 rewards,
        uint256 program,
        uint256 nftId,
        bool claimed,
        bool hasNft
    );
    event StakeDeleted(uint256 id);

    mapping(uint256 => StakeProgram) StakePrograms;
    mapping(uint256 => Stake) Stakes;

    mapping(address => uint256[]) stakeUserIndex;

    /**
     * @dev Removes a specific id from an array stored in the contract's storage.
     * @param index The storage array from which to remove the id.
     * @param id The id to remove from the array.
     */
    function popFromIndex(uint256[] storage index, uint256 id) internal {
        uint256 length = index.length;
        for (uint256 i = 0; i < length; i++) {
            if (id == index[i]) {
                index[i] = index[length - 1];
                index.pop();
                break;
            }
        }
    }

    /**
     * @dev Removes an ID from the stakeUser index for a given Stake record.
     * @param id The id of the record to remove from the index.
     */
    function deleteStakeUserIndexForId(uint256 id) internal {
        uint256[] storage index = stakeUserIndex[Stakes[id].user];
        popFromIndex(index, id);
    }

    /**
     * @dev Adds a new ID to the stakeUser index for a given Stake record.
     * @param id The id of the record to add.
     * @param value The Stake record to add.
     */
    function addStakeUserIndexForId(uint256 id, Stake memory value) internal {
        stakeUserIndex[value.user].push(id);
    }

    /**
     * @dev Adds a new StakeProgram record and updates relevant indexes.
     * @notice Emits a StakeProgramAdded event on success.
     * @param value The new record to add.
     * @return The ID of the newly added record.
     */
    function addStakeProgram(
        StakeProgram calldata value
    ) external onlyOwner returns (uint256) {
        uint256 id = stakeProgramCounter++;
        StakePrograms[id] = value;
        emit StakeProgramCreated(
            id,
            value.active,
            value.rewards,
            value.duration
        );
        return id;
    }

    /**
     * @dev Adds a new Stake record and updates relevant indexes.
     * @notice Emits a StakeAdded event on success.
     * @param value The new record to add.
     * @return The ID of the newly added record.
     */
    function addStake(
        Stake calldata value
    ) external onlyOwner returns (uint256) {
        uint256 id = stakeCounter++;
        Stakes[id] = value;
        addStakeUserIndexForId(id, value);
        emit StakeCreated(
            id,
            value.user,
            value.unlock,
            value.amount,
            value.rewards,
            value.program,
            value.nftId,
            value.claimed,
            value.hasNft
        );
        return id;
    }

    /**
     * @dev Deletes a StakeProgram record by its ID and updates relevant indexes.
     * @notice Emits a StakeProgramDeleted event on success.
     * @param id The ID of the record to delete.
     */
    function deleteStakeProgram(uint256 id) external onlyOwner {
        delete StakePrograms[id];
        emit StakeProgramDeleted(id);
    }

    /**
     * @dev Deletes a Stake record by its ID and updates relevant indexes.
     * @notice Emits a StakeDeleted event on success.
     * @param id The ID of the record to delete.
     */
    function deleteStake(uint256 id) external onlyOwner {
        deleteStakeUserIndexForId(id);
        delete Stakes[id];
        emit StakeDeleted(id);
    }

    /**
     * @dev Updates a StakeProgram record by its id.
     * @notice Emits a StakeProgramUpdated event on success.
     * @param id The id of the record to update.
     * @param value The new data to update the record with.
     */
    function updateStakeProgram(
        uint256 id,
        StakeProgram calldata value
    ) external onlyOwner {
        StakePrograms[id] = value;
        emit StakeProgramUpdated(
            id,
            value.active,
            value.rewards,
            value.duration
        );
    }

    /**
     * @dev Updates a Stake record by its id.
     * @notice Emits a StakeUpdated event on success.
     * @param id The id of the record to update.
     * @param value The new data to update the record with.
     */
    function updateStake(uint256 id, Stake calldata value) external onlyOwner {
        deleteStakeUserIndexForId(id);
        addStakeUserIndexForId(id, Stakes[id]);
        Stakes[id] = value;
        emit StakeUpdated(
            id,
            value.user,
            value.unlock,
            value.amount,
            value.rewards,
            value.program,
            value.nftId,
            value.claimed,
            value.hasNft
        );
    }

    /**
     * @dev Finds IDs of Stake records by a specific user.
     * @param value The user value to search by.
     * @return An array of matching record IDs.
     */
    function findStakesByUser(
        address value
    ) external view returns (uint256[] memory) {
        return stakeUserIndex[value];
    }

    /**
     * @dev Retrieves a StakeProgram record by its IDs.
     * @param id Record ID to retrieve.
     * @return The requested record.
     */
    function getStakeProgramById(
        uint256 id
    ) external view returns (StakeProgram memory) {
        return StakePrograms[id];
    }

    /**
     * @dev Retrieves an array of StakeProgram records by their IDs.
     * @param idList An array of record IDs to retrieve.
     * @return An array of the retrieved records.
     */
    function getStakeProgramsById(
        uint256[] calldata idList
    ) external view returns (StakeProgram[] memory) {
        uint256 length = idList.length;
        StakeProgram[] memory result = new StakeProgram[](length);
        for (uint256 index = 0; index < length; index++) {
            result[index] = StakePrograms[idList[index]];
        }
        return result;
    }

    /**
     * @dev Retrieves a Stake record by its IDs.
     * @param id Record ID to retrieve.
     * @return The requested record.
     */
    function getStakeById(uint256 id) external view returns (Stake memory) {
        return Stakes[id];
    }

    /**
     * @dev Retrieves an array of Stake records by their IDs.
     * @param idList An array of record IDs to retrieve.
     * @return An array of the retrieved records.
     */
    function getStakesById(
        uint256[] calldata idList
    ) external view returns (Stake[] memory) {
        uint256 length = idList.length;
        Stake[] memory result = new Stake[](length);
        for (uint256 index = 0; index < length; index++) {
            result[index] = Stakes[idList[index]];
        }
        return result;
    }
}