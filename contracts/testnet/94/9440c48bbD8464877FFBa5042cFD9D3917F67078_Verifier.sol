//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// 2019 OKIMS
//      ported to solidity 0.6
//      fixed linter warnings
//      added requiere error messages
//
// 2021 Remco Bloemen
//       cleaned up code
//       added InvalidProve() error
//       always revert with InvalidProof() on invalid proof
//       make decryptPairing strict
//
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.4;

library decryptPairing {
  error InvalidProof();

  // The prime q in the base field F_q for G1
  uint256 constant BASE_MODULUS = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

  // The prime moludus of the scalar field of G1.
  uint256 constant SCALAR_MODULUS = 21888242871839275222246405745257275088548364400416034343698204186575808495617;

  struct G1Point {
    uint256 X;
    uint256 Y;
  }

  // Encoding of field elements is: X[0] * z + X[1]
  struct G2Point {
    uint256[2] X;
    uint256[2] Y;
  }

  /// @return the generator of G1
  function P1() internal pure returns (G1Point memory) {
    return G1Point(1, 2);
  }

  /// @return the generator of G2
  function P2() internal pure returns (G2Point memory) {
    return
      G2Point(
        [
          11559732032986387107991004021392285783925812861821192530917403151452391805634,
          10857046999023057135944570762232829481370756359578518086990519993285655852781
        ],
        [
          4082367875863433681332203403145435568316851327593401208105741076214120093531,
          8495653923123431417604973247489272438418190587263600148770280649306958101930
        ]
      );
  }

  /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.
  function negate(G1Point memory p) internal pure returns (G1Point memory r) {
    if (p.X == 0 && p.Y == 0) return G1Point(0, 0);
    // Validate input or revert
    if (p.X >= BASE_MODULUS || p.Y >= BASE_MODULUS) revert InvalidProof();
    // We know p.Y > 0 and p.Y < BASE_MODULUS.
    return G1Point(p.X, BASE_MODULUS - p.Y);
  }

  /// @return r the sum of two points of G1
  function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {
    // By EIP-196 all input is validated to be less than the BASE_MODULUS and form points
    // on the curve.
    uint256[4] memory input;
    input[0] = p1.X;
    input[1] = p1.Y;
    input[2] = p2.X;
    input[3] = p2.Y;
    bool success;
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
    }
    if (!success) revert InvalidProof();
  }

  /// @return r the product of a point on G1 and a scalar, i.e.
  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.
  function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {
    // By EIP-196 the values p.X and p.Y are verified to less than the BASE_MODULUS and
    // form a valid point on the curve. But the scalar is not verified, so we do that explicitelly.
    if (s >= SCALAR_MODULUS) revert InvalidProof();
    uint256[3] memory input;
    input[0] = p.X;
    input[1] = p.Y;
    input[2] = s;
    bool success;
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
    }
    if (!success) revert InvalidProof();
  }

  /// Asserts the pairing check
  /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
  /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should succeed
  function pairingCheck(G1Point[] memory p1, G2Point[] memory p2) internal view {
    // By EIP-197 all input is verified to be less than the BASE_MODULUS and form elements in their
    // respective groups of the right order.
    if (p1.length != p2.length) revert InvalidProof();
    uint256 elements = p1.length;
    uint256 inputSize = elements * 6;
    uint256[] memory input = new uint256[](inputSize);
    for (uint256 i = 0; i < elements; i++) {
      input[i * 6 + 0] = p1[i].X;
      input[i * 6 + 1] = p1[i].Y;
      input[i * 6 + 2] = p2[i].X[0];
      input[i * 6 + 3] = p2[i].X[1];
      input[i * 6 + 4] = p2[i].Y[0];
      input[i * 6 + 5] = p2[i].Y[1];
    }
    uint256[1] memory out;
    bool success;
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
    }
    if (!success || out[0] != 1) revert InvalidProof();
  }
}

contract decryptVerifier {
  using decryptPairing for *;

  struct VerifyingKey {
    decryptPairing.G1Point alfa1;
    decryptPairing.G2Point beta2;
    decryptPairing.G2Point gamma2;
    decryptPairing.G2Point delta2;
    decryptPairing.G1Point[] IC;
  }

  struct Proof {
    decryptPairing.G1Point A;
    decryptPairing.G2Point B;
    decryptPairing.G1Point C;
  }

  function verifyingKey() internal pure returns (VerifyingKey memory vk) {
    vk.alfa1 = decryptPairing.G1Point(
      14378794661994809316668936077887579852844330409586136188493910229510707683568,
      19007180918058273234125706522281291487787880146734549337345180962710738215208
    );

    vk.beta2 = decryptPairing.G2Point(
      [5920706861016946300912146506670818945013737603659177373891149557636543490740, 12055325713222300848813253111985210672218263044214498326157766255150057128762],
      [9700420230412290932994502491200547761155381189822684608735830492099336040170, 14277278647337675353039880797101698215986155900184787257566473040310971051502]
    );

    vk.gamma2 = decryptPairing.G2Point(
      [11559732032986387107991004021392285783925812861821192530917403151452391805634, 10857046999023057135944570762232829481370756359578518086990519993285655852781],
      [4082367875863433681332203403145435568316851327593401208105741076214120093531, 8495653923123431417604973247489272438418190587263600148770280649306958101930]
    );

    vk.delta2 = decryptPairing.G2Point(
      [2614393272042636883642406959667493859901237580427621653608096663907621357233, 1964981275697585238605402240113919366398390709670440505075730174260554445705],
      [9189782200754376734610203722569815418123674375230416135514988061268545393615, 335583758084218411767961006225112755071517632911052147627617808779884073621]
    );

    vk.IC = new decryptPairing.G1Point[](9);

    
      vk.IC[0] = decryptPairing.G1Point(
        17854733421397165608262462049684284336255742648568831657523886593186490602210,
        12839373377032552234662131381138009279901403997747136496908040176928198561663
      );
    
      vk.IC[1] = decryptPairing.G1Point(
        2629139772487147674432574534272829205191788308400536497277170299204663191307,
        14274895402123326223060282762547660464413654269179456113773077841713404486752
      );
    
      vk.IC[2] = decryptPairing.G1Point(
        14560471281687591095227499730163073797568392743215867327526857647223718096234,
        20966910711732834178412523277349402192902525448461237381715292229043015110883
      );
    
      vk.IC[3] = decryptPairing.G1Point(
        2554999751542588793341130518011402821658200412663536273036411016468936390926,
        10515354706531836788326139008555093880451864201992553355408195656889553594357
      );
    
      vk.IC[4] = decryptPairing.G1Point(
        13473493400610673668323330655698733657067445159311605536170750154290967784949,
        18923732820433610781579130556281807540716390783193615761913957878340132573484
      );
    
      vk.IC[5] = decryptPairing.G1Point(
        14541220009622429490397459517201299925684119650946448524989536861477483815541,
        11859653924722030439388847990310901995227417858202981608579730020380434752462
      );
    
      vk.IC[6] = decryptPairing.G1Point(
        3991087665501616914259201928270431158534588993038537184038892339797311355916,
        9453526571641212159934262670528971268567322423654395766048195997498188241024
      );
    
      vk.IC[7] = decryptPairing.G1Point(
        12939365365802799708669020570092323830658766694554795296336766039287172831430,
        20170753079388987181897287974947225620167894095708787680068635761040104603772
      );
    
      vk.IC[8] = decryptPairing.G1Point(
        16727354228187578636278511155563215606343898176120707645515989880257596930837,
        12694551704743088794660820574629031477845658847890554347629588846999366117128
      );
    
  }

  /// @dev Verifies a Semaphore proof. Reverts with InvalidProof if the proof is invalid.
  function verifyProof(
    uint[2] memory a,
    uint[2][2] memory b,
    uint[2] memory c,
    uint[8] memory input
  ) public view {
    // If the values are not in the correct range, the decryptPairing contract will revert.
    Proof memory proof;
    proof.A = decryptPairing.G1Point(a[0], a[1]);
    proof.B = decryptPairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
    proof.C = decryptPairing.G1Point(c[0], c[1]);

    VerifyingKey memory vk = verifyingKey();

    // Compute the linear combination vk_x of inputs times IC
    if (input.length + 1 != vk.IC.length) revert decryptPairing.InvalidProof();
    decryptPairing.G1Point memory vk_x = vk.IC[0];
    for (uint i = 0; i < input.length; i++) {
      vk_x = decryptPairing.addition(vk_x, decryptPairing.scalar_mul(vk.IC[i+1], input[i]));
    }

    // Check pairing
    decryptPairing.G1Point[] memory p1 = new decryptPairing.G1Point[](4);
    decryptPairing.G2Point[] memory p2 = new decryptPairing.G2Point[](4);
    p1[0] = decryptPairing.negate(proof.A);
    p2[0] = proof.B;
    p1[1] = vk.alfa1;
    p2[1] = vk.beta2;
    p1[2] = vk_x;
    p2[2] = vk.gamma2;
    p1[3] = proof.C;
    p2[3] = vk.delta2;
    decryptPairing.pairingCheck(p1, p2);
  }
}

//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// 2019 OKIMS
//      ported to solidity 0.6
//      fixed linter warnings
//      added requiere error messages
//
// 2021 Remco Bloemen
//       cleaned up code
//       added InvalidProve() error
//       always revert with InvalidProof() on invalid proof
//       make shuffle_encrypt_v2Pairing strict
//
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.4;

library shuffle_encrypt_v2Pairing {
  error InvalidProof();

  // The prime q in the base field F_q for G1
  uint256 constant BASE_MODULUS = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

  // The prime moludus of the scalar field of G1.
  uint256 constant SCALAR_MODULUS = 21888242871839275222246405745257275088548364400416034343698204186575808495617;

  struct G1Point {
    uint256 X;
    uint256 Y;
  }

  // Encoding of field elements is: X[0] * z + X[1]
  struct G2Point {
    uint256[2] X;
    uint256[2] Y;
  }

  /// @return the generator of G1
  function P1() internal pure returns (G1Point memory) {
    return G1Point(1, 2);
  }

  /// @return the generator of G2
  function P2() internal pure returns (G2Point memory) {
    return
      G2Point(
        [
          11559732032986387107991004021392285783925812861821192530917403151452391805634,
          10857046999023057135944570762232829481370756359578518086990519993285655852781
        ],
        [
          4082367875863433681332203403145435568316851327593401208105741076214120093531,
          8495653923123431417604973247489272438418190587263600148770280649306958101930
        ]
      );
  }

  /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.
  function negate(G1Point memory p) internal pure returns (G1Point memory r) {
    if (p.X == 0 && p.Y == 0) return G1Point(0, 0);
    // Validate input or revert
    if (p.X >= BASE_MODULUS || p.Y >= BASE_MODULUS) revert InvalidProof();
    // We know p.Y > 0 and p.Y < BASE_MODULUS.
    return G1Point(p.X, BASE_MODULUS - p.Y);
  }

  /// @return r the sum of two points of G1
  function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {
    // By EIP-196 all input is validated to be less than the BASE_MODULUS and form points
    // on the curve.
    uint256[4] memory input;
    input[0] = p1.X;
    input[1] = p1.Y;
    input[2] = p2.X;
    input[3] = p2.Y;
    bool success;
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
    }
    if (!success) revert InvalidProof();
  }

  /// @return r the product of a point on G1 and a scalar, i.e.
  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.
  function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {
    // By EIP-196 the values p.X and p.Y are verified to less than the BASE_MODULUS and
    // form a valid point on the curve. But the scalar is not verified, so we do that explicitelly.
    if (s >= SCALAR_MODULUS) revert InvalidProof();
    uint256[3] memory input;
    input[0] = p.X;
    input[1] = p.Y;
    input[2] = s;
    bool success;
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
    }
    if (!success) revert InvalidProof();
  }

  /// Asserts the pairing check
  /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
  /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should succeed
  function pairingCheck(G1Point[] memory p1, G2Point[] memory p2) internal view {
    // By EIP-197 all input is verified to be less than the BASE_MODULUS and form elements in their
    // respective groups of the right order.
    if (p1.length != p2.length) revert InvalidProof();
    uint256 elements = p1.length;
    uint256 inputSize = elements * 6;
    uint256[] memory input = new uint256[](inputSize);
    for (uint256 i = 0; i < elements; i++) {
      input[i * 6 + 0] = p1[i].X;
      input[i * 6 + 1] = p1[i].Y;
      input[i * 6 + 2] = p2[i].X[0];
      input[i * 6 + 3] = p2[i].X[1];
      input[i * 6 + 4] = p2[i].Y[0];
      input[i * 6 + 5] = p2[i].Y[1];
    }
    uint256[1] memory out;
    bool success;
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
    }
    if (!success || out[0] != 1) revert InvalidProof();
  }
}

library VerifyingKeyIC0 {
  function getIC() public pure returns (shuffle_encrypt_v2Pairing.G1Point[] memory ic) {
    ic = new shuffle_encrypt_v2Pairing.G1Point[](216);
     ic[0] = shuffle_encrypt_v2Pairing.G1Point(
        21682935912090743411909788574769735909673447893913733179723468133137320897096,
        17929150485863953303013689109390405165670680118652942284936267029466248597592
      );
    
      ic[1] = shuffle_encrypt_v2Pairing.G1Point(
        12711948081004246602422230685092140939431931640883533840188584848692656072456,
        1803664691273556023345886282142577697373254104736944329910805950954182541761
      );
    
      ic[2] = shuffle_encrypt_v2Pairing.G1Point(
        6166277709056469203659632620507393035072291878297380744205178516180571612352,
        8644603696412722745792194884787352755762075596522397463919623610798895107730
      );
    
      ic[3] = shuffle_encrypt_v2Pairing.G1Point(
        6117937439355875668217434706070226289074250245789859613339335477616726068309,
        17850908875682372237953331122598266192643806295816400896654118046806824720505
      );
    
      ic[4] = shuffle_encrypt_v2Pairing.G1Point(
        7355149089267618191821120077836379629597892258168131207616652908305377348794,
        9128569527814960102929123006559845184942505832275459818792024852076811795541
      );
    
      ic[5] = shuffle_encrypt_v2Pairing.G1Point(
        7468982474955895445177286455269859852682034450048195671817059441069689886899,
        1475304084699778858133934275109220288465912364847026802053168340222502014072
      );
    
      ic[6] = shuffle_encrypt_v2Pairing.G1Point(
        14307430150431559805617667486569164128135868350122855747735816637901092766937,
        342167245267662412675110352458129236981462923272831355083868248894591303093
      );
    
      ic[7] = shuffle_encrypt_v2Pairing.G1Point(
        7651049880240548925855296494626780136462659118257439837679824528294112627605,
        13287254212512058496692380792103105846727086366105047220539353725576567964416
      );
    
      ic[8] = shuffle_encrypt_v2Pairing.G1Point(
        8040761067938661512019246821866233272966178401555296594952394591775579523817,
        2002410277303005885567151750355338049764526890250879300893821936020968422317
      );
    
      ic[9] = shuffle_encrypt_v2Pairing.G1Point(
        9803126798669090640000407393475785849051330343150305087853812979797838030019,
        12240602467547767443642843425901518690669231145629855313805815749171567488521
      );
    
      ic[10] = shuffle_encrypt_v2Pairing.G1Point(
        15765214569098839086221557080707919011814837578447232590249095289924046032521,
        14407988483697697044035382228642186933639578505641438379891617354661164864955
      );
    
      ic[11] = shuffle_encrypt_v2Pairing.G1Point(
        18028862440937948142863063209334634849977536717073509968563900635670883686869,
        16172310375503718872935886826399877447120521749228297936916378085919702335049
      );
    
      ic[12] = shuffle_encrypt_v2Pairing.G1Point(
        1394237365291490793753360794087862675552963967503299186062042976701907392487,
        2325563976565372748400029020282666710258861360641517666580688109211598194583
      );
    
      ic[13] = shuffle_encrypt_v2Pairing.G1Point(
        21855990117220830558284516798787309425747523571041138499497021289594683735915,
        10697162934608802029395845507255880358553233054283691781827623888735769449480
      );
    
      ic[14] = shuffle_encrypt_v2Pairing.G1Point(
        7553276013405274113010241414731292595928517239940257043960511072320610541295,
        11174101093638991233508971564803600112654162849294186667817045745412231709587
      );
    
      ic[15] = shuffle_encrypt_v2Pairing.G1Point(
        5622394079094390151288311497898340297985447026448397543697790541641788726950,
        9609949258847851670999628755805560733868909812350764642452249477118767184960
      );
    
      ic[16] = shuffle_encrypt_v2Pairing.G1Point(
        7244387792547610818865606572366100632864995169302069454281737959883258694690,
        11234863884121762465905319558946046083354911012702778219452238476497585442167
      );
    
      ic[17] = shuffle_encrypt_v2Pairing.G1Point(
        17964730192207556599985729344037103628730658765582966006041055309066169582736,
        10913707573307871915305943482545679237982332846320809943218840896535670438405
      );
    
      ic[18] = shuffle_encrypt_v2Pairing.G1Point(
        19535448603749959461235344830236917121201313744555673475909140139738742003806,
        223466645718763760170656122756590056782975614377221586155816976610704987335
      );
    
      ic[19] = shuffle_encrypt_v2Pairing.G1Point(
        20225300766752640345261656588264840454103554967560464047132326671774417282581,
        16327348116757203812426345295384659834050886991006847055675227358144056444141
      );
    
      ic[20] = shuffle_encrypt_v2Pairing.G1Point(
        20248884904470602497749123099806939385800777586469214552379340257063775342536,
        8485346678975444895762148368624739666802812543453223464635954593751885478993
      );
    
      ic[21] = shuffle_encrypt_v2Pairing.G1Point(
        9905982308992659358315252076280320014747647169217063509387472224580218019058,
        1897393582027085525336309901538300340526866390083490233063397763012544548661
      );
    
      ic[22] = shuffle_encrypt_v2Pairing.G1Point(
        1019092669759090433693873052995320198231646660365210855456765719249831566251,
        13197014194152932936919286571960513904651077949885906344847138193538779075085
      );
    
      ic[23] = shuffle_encrypt_v2Pairing.G1Point(
        16166757670298594655816201611952013166997336565914400261066039488122101768609,
        18848467989610851640339542017487883972395240253272371182722132968635750086362
      );
    
      ic[24] = shuffle_encrypt_v2Pairing.G1Point(
        17976867163713947871711755421713294278958741514574663080337823345239803286590,
        13171787558532595313479915388085884030619686858790012748132408592957676617924
      );
    
      ic[25] = shuffle_encrypt_v2Pairing.G1Point(
        18219193898161175477487138008211589904965887244768274141500990439209057185822,
        6709901299912548801791081683092369922312664326891851712928337933948895624836
      );
    
      ic[26] = shuffle_encrypt_v2Pairing.G1Point(
        20611306044480540184055865882892022013792943754871906105653690810013096576600,
        21800762092922467786457824026407966495310295755228751699041461102122049004012
      );
    
      ic[27] = shuffle_encrypt_v2Pairing.G1Point(
        12217242884554044030672043653336763679951502974566822133794057695770711151971,
        13768237422583671052398583868587359883027204788501982160294535412512416050368
      );
    
      ic[28] = shuffle_encrypt_v2Pairing.G1Point(
        13506551305236332781040230284323045304728875479716974646918569879346528302488,
        4091660232641159776119383841387572585049698196472931903539119351104537162130
      );
    
      ic[29] = shuffle_encrypt_v2Pairing.G1Point(
        13442704236597413538386267540523024129489900122891764261134042229417192213855,
        2827216693104797029008650428765694261582532636820072660846159403001919684647
      );
    
      ic[30] = shuffle_encrypt_v2Pairing.G1Point(
        6733462958273442693157393328574200544694508604250406825251480769002696262252,
        11965329780942519021103505885266388100730738084319474879651623358351014826757
      );
    
      ic[31] = shuffle_encrypt_v2Pairing.G1Point(
        9032223606792139151519389337529921748775428852773892095039412101984458920628,
        15270394547693948617756286252121905763719385477847390585136826736877868577224
      );
    
      ic[32] = shuffle_encrypt_v2Pairing.G1Point(
        6252592258539003198583981127198806530872677651816010036514514167055933851860,
        9175530894780903194440611468930580803831429639307030859976835004790565693430
      );
    
      ic[33] = shuffle_encrypt_v2Pairing.G1Point(
        15701836822841063953639746648681711677379233787326264493132221556112265262643,
        1340201792329082544758653925467494020257612743701040497295983321629698658241
      );
    
      ic[34] = shuffle_encrypt_v2Pairing.G1Point(
        19974857020287592277055271104471721466105354145946786106175426172562870017857,
        5557243376466895164989031554412281194038937917728764182567199387796601949098
      );
    
      ic[35] = shuffle_encrypt_v2Pairing.G1Point(
        2833255904463255659035284842894645424535029828299970234201713174690602195574,
        17655296338726315743837900905282716777172364082461467359938661616132097138053
      );
    
      ic[36] = shuffle_encrypt_v2Pairing.G1Point(
        8944024168737845717323090088198897354318787418439833929046536309129438562627,
        20167612385286800623181447192003197973667560891288037083705005819805671960070
      );
    
      ic[37] = shuffle_encrypt_v2Pairing.G1Point(
        14865283359054918607872978735002876862071543724522699280383932400335425637201,
        3849542881104483952692031463153745371063918332517593336555594014652541773627
      );
    
      ic[38] = shuffle_encrypt_v2Pairing.G1Point(
        11661511178904846518607762384128120818067791472111559531962100872161774895565,
        14618998960516829291952335638032965636359105045024201646707184546438151209402
      );
    
      ic[39] = shuffle_encrypt_v2Pairing.G1Point(
        15492202454403742119729733694598311044950068377001378657739781008416937203475,
        17183121687623066376303206839858319842963003083854143415085433802466360542623
      );
    
      ic[40] = shuffle_encrypt_v2Pairing.G1Point(
        14393671932486650224221949751294776915729624162627771817313840541027652694231,
        7502674983934536180103085515690973129373587995583071546779801081450192342729
      );
    
      ic[41] = shuffle_encrypt_v2Pairing.G1Point(
        19041341904966874583952717988528129758157520550868568123991798258524886840434,
        10830816846701466117998803663639960877438222425477471313470585244926615411106
      );
    
      ic[42] = shuffle_encrypt_v2Pairing.G1Point(
        14840133029887906933938337015525341749911910640780716877422711543919805650566,
        17769587445037910725202271199350067364523095495882073443541062066420934601017
      );
    
      ic[43] = shuffle_encrypt_v2Pairing.G1Point(
        7465425282153386623330512179221312484524287787558887932351350054023243545501,
        13081558600991772881540913474976861781044002475269561033965907141705739313814
      );
    
      ic[44] = shuffle_encrypt_v2Pairing.G1Point(
        21862637473432627788592550937060486358053811488198729980057492101574277200275,
        18144952365940834317619460699666744186686357928592500956414579978260139704038
      );
    
      ic[45] = shuffle_encrypt_v2Pairing.G1Point(
        11927604542598620283282896133823364565553176235979214726928976997662944533854,
        13488261322484475998310387951351139790699166642935677238185958691986388867550
      );
    
      ic[46] = shuffle_encrypt_v2Pairing.G1Point(
        8663575124994810535699518589466545846342870745527579122153275801625244706033,
        1075662685834837422785101620109838602038147208620389020177806396260782429365
      );
    
      ic[47] = shuffle_encrypt_v2Pairing.G1Point(
        8758082197703373062082254177029957757797729351734025213929870794508221070316,
        15234959197617688360248587929678579051315237628151998444710982114839182841198
      );
    
      ic[48] = shuffle_encrypt_v2Pairing.G1Point(
        12528316061212431233988725704423322200179276664082896806836834147487065948731,
        13274598666650647913007561634271454069996713574162499802752967684663914618965
      );
    
      ic[49] = shuffle_encrypt_v2Pairing.G1Point(
        1288627018638356747445322887411691620178175402900902265940821663806883561693,
        4508917306036902479934951697088469272392980000171697763475097497879371224921
      );
    
      ic[50] = shuffle_encrypt_v2Pairing.G1Point(
        1077611961560212183765330381755284431061507462637902458906424573031581415534,
        21716226798879959560222096678674276522154587920259274518715019973878298356264
      );
    
      ic[51] = shuffle_encrypt_v2Pairing.G1Point(
        16364584209044326319499672938618749429876436153418263349947269830694242211030,
        9721714988458659919298970627046104318731940199431565665289568884009291611517
      );
    
      ic[52] = shuffle_encrypt_v2Pairing.G1Point(
        9587244019971211488392460881167062557678271527393105408772682679818385770680,
        15722382474222208469393461291197415015284290331801232514524831348333979824350
      );
    
      ic[53] = shuffle_encrypt_v2Pairing.G1Point(
        4180263114517416454847268633028845386735480550241099782806840039234963723791,
        15679816772403153731995141071994019983796117740142217842124191220893540224626
      );
    
      ic[54] = shuffle_encrypt_v2Pairing.G1Point(
        11040130342440915070915620660055728560148943062484021299672975466505970502608,
        16497723129464128426839775585829065218680595575541266921812211532757277710655
      );
    
      ic[55] = shuffle_encrypt_v2Pairing.G1Point(
        15666630693209209778402157249685180212939736762633333313202099466465163336559,
        9447431854771855092861150881348106410254040456080157078332091893834963352412
      );
    
      ic[56] = shuffle_encrypt_v2Pairing.G1Point(
        9368045009571121501828872856078953176103991784063398006443271050323014233402,
        21452960847417751533918183346779237506155847483784464841281808090909017951191
      );
    
      ic[57] = shuffle_encrypt_v2Pairing.G1Point(
        7591079326795059435831345048364572095584213879079275178024375284913233619062,
        20824203189531091603888286541170900673835063908924213206882977128077491803030
      );
    
      ic[58] = shuffle_encrypt_v2Pairing.G1Point(
        3788482644026872211446898956132473652825102558829115098894910948552995819173,
        15386549679247289461073955496658161490488161865669892797301100827403471583687
      );
    
      ic[59] = shuffle_encrypt_v2Pairing.G1Point(
        8154197006195114115500049175055051420251228113506360266896649257967719870868,
        8537063838771626579467203873487050983950084185324980383022633055052504227795
      );
    
      ic[60] = shuffle_encrypt_v2Pairing.G1Point(
        8097920506264114157875656422467766663388179472749029009568922869892854215643,
        6657183552267724626499172515356998926673618957920119543219625425544641938964
      );
    
      ic[61] = shuffle_encrypt_v2Pairing.G1Point(
        11996013420760844485331265091430690348663451981394787247926710868297947505743,
        12991263613136840479805064958064083119862188812004858151913164873387815674647
      );
    
      ic[62] = shuffle_encrypt_v2Pairing.G1Point(
        21061476898894033102926708641727482852504647846269721375326243949776697128715,
        9248620442151306595909398409839680601066397949429166612457463405582106755439
      );
    
      ic[63] = shuffle_encrypt_v2Pairing.G1Point(
        13934627961850817644427423171292024885944685691159401312223095576568821342982,
        16026335537483030879451683620518255180095923230290526655780162861050301217709
      );
    
      ic[64] = shuffle_encrypt_v2Pairing.G1Point(
        9364152747705772927000111540755642435177386369741543278059700972980274854973,
        12305862474844298031654551011219365914667983760221118234861311267211399577148
      );
    
      ic[65] = shuffle_encrypt_v2Pairing.G1Point(
        6310483732295931803168107839117392235303531524960651734450146279147604500049,
        5577027216399435466536696485449450721817877263181632906489454936351812015224
      );
    
      ic[66] = shuffle_encrypt_v2Pairing.G1Point(
        12712168187547742321714771427899963853845550197052997220083490245594728044957,
        2569053823913885898297078233028437479493504892495991201856158213921922162378
      );
    
      ic[67] = shuffle_encrypt_v2Pairing.G1Point(
        4731564581410015399326368419874379096395779246962818967223334613424315126838,
        15307898933056282595421420671262191556185273782253152441269359264384139449081
      );
    
      ic[68] = shuffle_encrypt_v2Pairing.G1Point(
        18010375176324920894963191776552773245209586789523022070146949294704971133344,
        14389798293457342414942321067400514122359410320913511397908095780832827441894
      );
    
      ic[69] = shuffle_encrypt_v2Pairing.G1Point(
        9298116758185819382456597746671811550432007809829341535263361632345101029720,
        5055047673703170535091217674821339439847373561211714643334760247538016817445
      );
    
      ic[70] = shuffle_encrypt_v2Pairing.G1Point(
        15974315531193621055546166043387506097293072260729510622625842561187376127438,
        10291673855831071908120624291139458712624088515037596605802647603343086614282
      );
    
      ic[71] = shuffle_encrypt_v2Pairing.G1Point(
        11513075736240969502326857572034893298037459722451749545864889102924200317665,
        5227555118754111716633819946662752424191823611039317646353803786634314243229
      );
    
      ic[72] = shuffle_encrypt_v2Pairing.G1Point(
        19969935363176958542055964134494156463355413878759965074411847387498257975907,
        11199265804910781530001006816661925232589326041480811939313511174053473170633
      );
    
      ic[73] = shuffle_encrypt_v2Pairing.G1Point(
        15813470899982121711783618635980531114144572061090215597715925742472552525306,
        16373921784899771131834902459899193396431712051006358356504259540508708472733
      );
    
      ic[74] = shuffle_encrypt_v2Pairing.G1Point(
        16116096650063549459005361630096629933599446722591347394606049955251454988688,
        239882397764520965020864581176968471012894007787355226317844344471434987239
      );
    
      ic[75] = shuffle_encrypt_v2Pairing.G1Point(
        289849025964626160841992755281214983850857994861143119562324837131227014343,
        6457737608131635287995226744884216410612115972954922622428206402794467297017
      );
    
      ic[76] = shuffle_encrypt_v2Pairing.G1Point(
        11271359707196425036694406203082381289270444428442365910016691820889918139606,
        6072563028852314148218927597783333764770986856494494129549166652295807311423
      );
    
      ic[77] = shuffle_encrypt_v2Pairing.G1Point(
        3823786716874800744259439296994886462453043881034493869480940485679381597993,
        4387300131162766045218582359736666576841736891542775457038036670661807634964
      );
    
      ic[78] = shuffle_encrypt_v2Pairing.G1Point(
        11531451196251566343662635091058096561767354907341035240752106268378273594593,
        9446433572050489943092446330213928382003256603549620421713631497590218379936
      );
    
      ic[79] = shuffle_encrypt_v2Pairing.G1Point(
        19757510205357130986726024631105880774805148363774264779833443088992324079954,
        4909399786553041489259678439901661005408507973758956337544930846225347055287
      );
    
      ic[80] = shuffle_encrypt_v2Pairing.G1Point(
        20717891568755567032601344180541502405270815616615695158793618255924170078789,
        16925094825243425205422502530657228442161577713971190935484470753477533647771
      );
    
      ic[81] = shuffle_encrypt_v2Pairing.G1Point(
        12105144143334253423483849621175168001831829245434468231460382174014087180740,
        890821805304205832219896528087563399571962577325023092762162165911036847332
      );
    
      ic[82] = shuffle_encrypt_v2Pairing.G1Point(
        15362174460582950628739006632068013534054124546628374399490130492423126720757,
        7709804456300236546030627479076349847500897392855002085409956822336809407647
      );
    
      ic[83] = shuffle_encrypt_v2Pairing.G1Point(
        18143805252624076771677092896637505318425508538883001636891240428226434320751,
        19768510553868430105628632650176233494613998000523484880265691590896239479070
      );
    
      ic[84] = shuffle_encrypt_v2Pairing.G1Point(
        8074239249283899483516853963422043451928448739586057143979006117661033101952,
        9383175805112260645694011266265936883613153989788117707171892792024386421757
      );
    
      ic[85] = shuffle_encrypt_v2Pairing.G1Point(
        1433657478064500479481607735388015147140328952228520395905225613609350725489,
        15328707547922285142725099987692182023905308329845863048369462692623148065220
      );
    
      ic[86] = shuffle_encrypt_v2Pairing.G1Point(
        2482730951543149548636498350412890534309446610101099524106996775152204042255,
        14592390264010016991441305971588996793096958668216470561598672185233705525655
      );
    
      ic[87] = shuffle_encrypt_v2Pairing.G1Point(
        5773664947846511980848025060399883119270818896370102821573907947866454375906,
        9024387922553917726491678902666008973419196150475419952420846758304998429027
      );
    
      ic[88] = shuffle_encrypt_v2Pairing.G1Point(
        17724835724119216304193710772216726520108617021322397718672030803243842573957,
        11275134992910510069819525907640142073465215460527211163559543845867614082969
      );
    
      ic[89] = shuffle_encrypt_v2Pairing.G1Point(
        13099385525253364928172410504944712191827364436304897854500053434535389005171,
        6141160275966004605060351047504559768758727879588668656727654908716926904381
      );
    
      ic[90] = shuffle_encrypt_v2Pairing.G1Point(
        18032499305781683826387543340633336624377952930454494829658658092136197007291,
        20410179409452730037522674205690260169875484268117579743832849739063417614892
      );
    
      ic[91] = shuffle_encrypt_v2Pairing.G1Point(
        21424410484262253962419188556261010129087775998448826019058371650990022310751,
        10349254844382521538703099227001813391081902327387088640107444064802312219666
      );
    
      ic[92] = shuffle_encrypt_v2Pairing.G1Point(
        21692012633293261376155765382919052682354068281120300629027924705157954676909,
        441095858376779759723549968934654698169852465939529755653015914998184640371
      );
    
      ic[93] = shuffle_encrypt_v2Pairing.G1Point(
        18037028305350834535801149316753733509888088006643311302722510104273909286704,
        16054530513676161324065162108044927908773674603388727815452469603619029460152
      );
    
      ic[94] = shuffle_encrypt_v2Pairing.G1Point(
        1787533079467568185400144414086091962863842819029015080809618461602347186135,
        7080790006370912392499581404837674816065619859720239185406428733335545567582
      );
    
      ic[95] = shuffle_encrypt_v2Pairing.G1Point(
        11833082896955192743619042642043312134381338514845382972166697445681173746887,
        3681470057050905629601012349736152855889358465626424490415194591027113735149
      );
    
      ic[96] = shuffle_encrypt_v2Pairing.G1Point(
        12421949909260455085727537601480182665722442743488000857490443765380715659196,
        2318353688526772484152768556640668981207658289067896273565520839105878038785
      );
    
      ic[97] = shuffle_encrypt_v2Pairing.G1Point(
        18931966228909771631373869502331298182654758316156752134765091966954180755109,
        617120113627061119877976006142631942278961128620200573359334745588627736581
      );
    
      ic[98] = shuffle_encrypt_v2Pairing.G1Point(
        14513750294007985349632284216879534544893270151278591561635197960861257890769,
        4710209047942922816404932721272253769069230639264289056357586706391348061708
      );
    
      ic[99] = shuffle_encrypt_v2Pairing.G1Point(
        15552700432349506459554491085793342009257669537551863997657310027849987335575,
        8085173949455320152845127371658327658381275200345421339182253805642841684656
      );
    
      ic[100] = shuffle_encrypt_v2Pairing.G1Point(
        12990713450444088483673887247161229591307202412377175757612598764524678778316,
        18351341683492268305424872357850460227362604690408090744788275778289361680634
      );
    
      ic[101] = shuffle_encrypt_v2Pairing.G1Point(
        19745791264390252873392708665269297935611924320459516146271559437940766386722,
        19285715829869624153433831546608663149221944221424632803743747347892141479093
      );
    
      ic[102] = shuffle_encrypt_v2Pairing.G1Point(
        7480594903203746068810383771519286122471595736182825387475339937511569983163,
        7210415672410415061048193280444771883600846891947311367192960448983465974004
      );
    
      ic[103] = shuffle_encrypt_v2Pairing.G1Point(
        2290358848424229095081538326115705271084374555515157433273078711457774053950,
        14721693430818713639537963053939386366482113959210511540742202654616484240385
      );
    
      ic[104] = shuffle_encrypt_v2Pairing.G1Point(
        17337408705988646813266032916297278332285320716315124605514629779100120795683,
        19714530649556715768115488244519130185336210710305414994535760360696937626648
      );
    
      ic[105] = shuffle_encrypt_v2Pairing.G1Point(
        7405519247948623035748676851709437767374137561122796922176432975505412661572,
        6491137751706048372798193989913239546601397092195867578028451076747792273440
      );
    
      ic[106] = shuffle_encrypt_v2Pairing.G1Point(
        17468317045877483970075906326253715926188919145036666324933027171948380272057,
        10132881276125903483443842465373748473998822061024791357184185883718413085753
      );
    
      ic[107] = shuffle_encrypt_v2Pairing.G1Point(
        3214844240686395010829069154236824997482585393741496454206981394122196622279,
        15252137134058608960280466302702159767746710472742120631160175991913683777854
      );
  }
}

library VerifyingKeyIC1 {
  function getIC() public  pure returns (shuffle_encrypt_v2Pairing.G1Point[] memory ic) {
    ic = new shuffle_encrypt_v2Pairing.G1Point[](216);
      ic[108] = shuffle_encrypt_v2Pairing.G1Point(
          9552424076035000583341022467497852429710699925779391943660657379949379371030,
          529173144297199834169799913008991791497508016850527001057537011137908711802
      );

      ic[109] = shuffle_encrypt_v2Pairing.G1Point(
        3540214109008642521637422356087108551590890417709520914907975323988898261242,
        8045610577305207460592941893868408125165666286186042926999998265185181068171
      );
    
      ic[110] = shuffle_encrypt_v2Pairing.G1Point(
        11272570498417538897803053690334464777334103964415173935224824981231126914459,
        20812752332209198893855916333181089233684702849539837702538083435781613949052
      );
    
      ic[111] = shuffle_encrypt_v2Pairing.G1Point(
        14411536654463394995525823976938859225135556009870432604358102183679272675021,
        4585528672462092343478045157407546316400227183871217255255063664949575461337
      );
    
      ic[112] = shuffle_encrypt_v2Pairing.G1Point(
        11758305278386559890479546204258407455511354754513428514118279474387464489410,
        3666400028456242104405096059726520387051953729544648368255087368182972333195
      );
    
      ic[113] = shuffle_encrypt_v2Pairing.G1Point(
        14317880847340274879356058719074628438847401435034223103576962084030856171884,
        21200262707592110229364417812804537919727879222560682813812542189179022748988
      );
    
      ic[114] = shuffle_encrypt_v2Pairing.G1Point(
        6348417598742834458666644488817638050824884153784680312020943980416872930429,
        13817944576400865141450032212603879814537843419474518745211046963283227339477
      );
    
      ic[115] = shuffle_encrypt_v2Pairing.G1Point(
        6991900815000502654107681742465827642004486444384941840134213221449867155698,
        21143729756244763228377948222767943869561314901589944104205908925855391966775
      );
    
      ic[116] = shuffle_encrypt_v2Pairing.G1Point(
        20588407821671684407700197811626294155967904553313591421977644466337870125906,
        3053661963338315787572648916532556472130642289825534230663453527465229556588
      );
    
      ic[117] = shuffle_encrypt_v2Pairing.G1Point(
        338115047460056762208663264113444499457527782812775825951663667761836794847,
        14984569445662195098458753191487315638225251552418799439350865392820142313828
      );
    
      ic[118] = shuffle_encrypt_v2Pairing.G1Point(
        11156801163488056917101440348881167292752297408939818322436896747321624382549,
        6897327229172153535046684847838802775550457863126550095255540793916357075239
      );
    
      ic[119] = shuffle_encrypt_v2Pairing.G1Point(
        5518112804527078884308190233021788835462662743227849300001201655367100983745,
        11982620419414459300446688054281905519405579310057175682009116157702965445597
      );
    
      ic[120] = shuffle_encrypt_v2Pairing.G1Point(
        7719917011242009854672926750439437596853908545603689336432262890510873937376,
        6664135608419458772155348855539631080807003906370102233248158582779742367876
      );
    
      ic[121] = shuffle_encrypt_v2Pairing.G1Point(
        10781343345755203329212945101600730228299049693045667614450328230156194639963,
        6451012341856133568978735663706027821909553324146059265390316971687847790500
      );
    
      ic[122] = shuffle_encrypt_v2Pairing.G1Point(
        7412630673378745075741434226210723400602407103117480704870612013905067727139,
        14101377054662728758172266557193395450484182134755191662835193009251027508772
      );
    
      ic[123] = shuffle_encrypt_v2Pairing.G1Point(
        19198763498327730492095160852021258032491829239980352553147114362600051921612,
        1245305967422958504873506456987688952540899603292342550268523763821646785312
      );
    
      ic[124] = shuffle_encrypt_v2Pairing.G1Point(
        7261613632796424127645523280014278162365372010637390370890514726184612283086,
        3824444186227090263591334034533664953857325608613918040762683453630435437153
      );
    
      ic[125] = shuffle_encrypt_v2Pairing.G1Point(
        7269348954015586619397368512364930907199232524792262610797845637303766409796,
        8505465845705654724210239275340194075162295472115823342789826471026118601548
      );
    
      ic[126] = shuffle_encrypt_v2Pairing.G1Point(
        21468800145573793801258192142712674222080317711540352405081465762592319901504,
        18562321256396991456491072138637572920559466482190682202059446545673118180046
      );
    
      ic[127] = shuffle_encrypt_v2Pairing.G1Point(
        21745062880383840331011156956638721291151736162850315091233286403464651839060,
        21599302121775289383604238511948669208777726028751699460104609237556425853160
      );
    
      ic[128] = shuffle_encrypt_v2Pairing.G1Point(
        13453694368268017691279410401838672050565855182148723089043690912367493749550,
        2298470330488982731019775463218439023486895341295582690843612639547298055606
      );
    
      ic[129] = shuffle_encrypt_v2Pairing.G1Point(
        5488795241445862787558986120495843158673376084285020938701242531053873490423,
        19834975127096419830500328573166900712071545199325719992592255319058095698062
      );
    
      ic[130] = shuffle_encrypt_v2Pairing.G1Point(
        16302513134712215771845082502815228643107079573737331520679243764407393302912,
        7239023876753491316927667689771240798503751699902447162230268662006709690898
      );
    
      ic[131] = shuffle_encrypt_v2Pairing.G1Point(
        20257904267766234752927449640873645720698417687904712873204330586447217032278,
        661442563459770230863949089598103092522123659454455442662181113924187555814
      );
    
      ic[132] = shuffle_encrypt_v2Pairing.G1Point(
        4772219276142750609468693527483568582116793442495739349754106112311754080897,
        9692762529245595559883417578111000731020475755411358563966886447021636533024
      );
    
      ic[133] = shuffle_encrypt_v2Pairing.G1Point(
        4863602352497106430477114011493639721855425810476656258860804857017938445532,
        21062439073953877254063961032145264929099087557849813505308669430890467729891
      );
    
      ic[134] = shuffle_encrypt_v2Pairing.G1Point(
        17473266228385869233827586103315015301277396404758971805835464739899378559645,
        1229467149750637301281509221026640445373994054378655343896088507752145514846
      );
    
      ic[135] = shuffle_encrypt_v2Pairing.G1Point(
        17925519109128027432465927097462536888392161716545431702595705912641794025034,
        17535442394851243437468008118909461063249439873269426998459335856145475998899
      );
    
      ic[136] = shuffle_encrypt_v2Pairing.G1Point(
        10627379415246265139351887204108755432043673681578142465725482365794062427799,
        8590067274218345682408558792704379747335817941403539901463787043031018767396
      );
    
      ic[137] = shuffle_encrypt_v2Pairing.G1Point(
        12229238448277361857109247563633835548874210021645179515855889238430110590947,
        17509307686935741890299903864008302862036896603010136884207857158674173932758
      );
    
      ic[138] = shuffle_encrypt_v2Pairing.G1Point(
        907418213182571145499511390953144604674949554751224604292819105491714113814,
        6782736415005696315316587399594505115817248624357818343569583457383236266893
      );
    
      ic[139] = shuffle_encrypt_v2Pairing.G1Point(
        9614463687219128948447643400395632061615066484197152023118527865217497149877,
        3281557149924649818093580243429583943662365587817289680985382319784918133061
      );
    
      ic[140] = shuffle_encrypt_v2Pairing.G1Point(
        3757843455722541186597657772522299940037904920542264995225126859204920979344,
        9183462263080526887179807313098842508041762193571148497775515103765642502873
      );
    
      ic[141] = shuffle_encrypt_v2Pairing.G1Point(
        13542242667293987027521563964890641134003552437641629247503117526203723411445,
        10730035017354342200016274865657090576346040630698982305710919809098895299168
      );
    
      ic[142] = shuffle_encrypt_v2Pairing.G1Point(
        19681135704779949449402102997200784003749215956890211561659714898867185959037,
        7316897342871990935083406993047715411399313539824118073049267192230021245710
      );
    
      ic[143] = shuffle_encrypt_v2Pairing.G1Point(
        15550130184075083654678307305900424440252958262467375796876027889157718911353,
        1648885430937865752348384787233010029515006279505940405767991789323021785156
      );
    
      ic[144] = shuffle_encrypt_v2Pairing.G1Point(
        11961956680186505231953982978381952014910106321044867184495934070083784762838,
        14445629733309100376421214580734612606993694104820494743602936729840507502515
      );
    
      ic[145] = shuffle_encrypt_v2Pairing.G1Point(
        4996440849602692239782925731133139493116694253126349997145189254633040777184,
        18870586036421767506931659074016112006358198899477586402200155761225722660203
      );
    
      ic[146] = shuffle_encrypt_v2Pairing.G1Point(
        10825320309387756924129864280053220516486699784385314544771219954980738318287,
        972511082903045115610508434965673530101404257912057695623541480900741466828
      );
    
      ic[147] = shuffle_encrypt_v2Pairing.G1Point(
        18441585025722688568328013834133858402046316791374176638003624285082343433175,
        21295735569753210282437661479345130930552416994074028465163159048149348672153
      );
    
      ic[148] = shuffle_encrypt_v2Pairing.G1Point(
        18278689227470711265477315561049687022656847493411168232761279380774640143978,
        16012523180658749693476710819968430391688640020943221111217882937197433283966
      );
    
      ic[149] = shuffle_encrypt_v2Pairing.G1Point(
        20038495993756470140093050776947080082451549615046147334259651766272771702357,
        12254660263064203578099831037995445357414607886503240089353298914723596048355
      );
    
      ic[150] = shuffle_encrypt_v2Pairing.G1Point(
        6350845666138006400515458185158744119416073415715935589706354305462189288638,
        16336456148288487038237804432236817632751273463542761255705815344441403771254
      );
    
      ic[151] = shuffle_encrypt_v2Pairing.G1Point(
        14992997531706828164384287776504567867401032471806793578650874652311941298648,
        12246350514036585078764572236388937938884997119975032653655728222538763236920
      );
    
      ic[152] = shuffle_encrypt_v2Pairing.G1Point(
        16691254191035064124120511665464747725311532348430204647399224080511490947003,
        2618341163378756134356849148605387195174474485349251679502685952042287353972
      );
    
      ic[153] = shuffle_encrypt_v2Pairing.G1Point(
        13020330619782909056153695936439245124192663528612073882168927539510344692744,
        5987105646541305009861698688331740275277063979456517749627770216926578415778
      );
    
      ic[154] = shuffle_encrypt_v2Pairing.G1Point(
        11560357832390774307921067472113375043385154822443083668848343614379660500014,
        10536041462676795328211511477304261119042190202388185759275908152659375061095
      );
    
      ic[155] = shuffle_encrypt_v2Pairing.G1Point(
        6908542567017264110998189204056874386955757671606950586362391300884641556470,
        21090212293436972870623055723779764419931424924533825233986133294076552527061
      );
    
      ic[156] = shuffle_encrypt_v2Pairing.G1Point(
        1589916782168492150385162742769372077451616662765342098207265780189169155788,
        4478883558335155220248728205882755688920394348919785994646997446660551211928
      );
    
      ic[157] = shuffle_encrypt_v2Pairing.G1Point(
        17885356028178363771715478161953185822567653029889514109386771004341030183402,
        13597335396259579399815145748489611806751768663069490706879908253306514813188
      );
    
      ic[158] = shuffle_encrypt_v2Pairing.G1Point(
        13930528112073307207193398158658824819491788596675115285675847762470216554607,
        1773728492342399595364048100167418702641658934777741135322660710964987955591
      );
    
      ic[159] = shuffle_encrypt_v2Pairing.G1Point(
        1154664708783632558235131668805531879767845481316604197733831421512505107458,
        21284886323233619680585721208675542859410601996837860919870060625625753015344
      );
    
      ic[160] = shuffle_encrypt_v2Pairing.G1Point(
        16855781971830621606353559931075269055193731171165265900944673174762460994216,
        21219068654146119560205556803414936766591470011642464135733864411467934106254
      );
    
      ic[161] = shuffle_encrypt_v2Pairing.G1Point(
        20934311714625000948972346742122312338434849119554006603355409920867215893377,
        2321501771971890633462263277462386067797588620094179713355302262736394369216
      );
    
      ic[162] = shuffle_encrypt_v2Pairing.G1Point(
        10499456913731784759044494778949818651650423272057880401211232359058331616171,
        15090583620547180907534058884272398073866833471310134704663011332396196511645
      );
    
      ic[163] = shuffle_encrypt_v2Pairing.G1Point(
        21604851647910222360531673870893694031536872893024595073753072344218385779810,
        718938060380244091325851866474592628149849084652232069941916328586109913039
      );
    
      ic[164] = shuffle_encrypt_v2Pairing.G1Point(
        11860541707682892192842763201091519027252323053219791304848642642710106929557,
        18905537707856605800992033026919082204858857111414772982102570848151000339865
      );
    
      ic[165] = shuffle_encrypt_v2Pairing.G1Point(
        4865724364142223600086805354338035573617963672491455834335312142499857555681,
        6664902592678734439356602797213511902486382954464201572548591204557088225468
      );
    
      ic[166] = shuffle_encrypt_v2Pairing.G1Point(
        8105294082436057473825059473796297827537774257767287202153949481555059846167,
        7644765252538421660373778574010088693796515413808641002205564855867506489600
      );
    
      ic[167] = shuffle_encrypt_v2Pairing.G1Point(
        15387821750604175920550118002559809190991383328611360381625031235101894704397,
        15668663909864473837609171355792229416630625846088353410677036332593238554979
      );
    
      ic[168] = shuffle_encrypt_v2Pairing.G1Point(
        19522145619721229631406320117858117935807897117733620133924926183216124333738,
        529174538066233462129832026051832101324719029758317164489956501285918520733
      );
    
      ic[169] = shuffle_encrypt_v2Pairing.G1Point(
        10084603824598375696599180824633809276353371697730714251953440112595204555381,
        8779799266551792931948168018181488970726081151508871940650549802758998445829
      );
    
      ic[170] = shuffle_encrypt_v2Pairing.G1Point(
        5550572290247397778400058796700321853436739010386788017017054385654494663929,
        12684305328414948316763962754827792779387720821085493134602598619081479096179
      );
    
      ic[171] = shuffle_encrypt_v2Pairing.G1Point(
        19757472684396337729491076915596419560439107500513939353002617656099856453507,
        14518829351680862984324429721921626756069013209857175307731629023841740297636
      );
    
      ic[172] = shuffle_encrypt_v2Pairing.G1Point(
        8460190055854255161956130142889335741734374799246321914332440935273078473924,
        10313803953530709838674234906217788415527046292202501815060230861490718189196
      );
    
      ic[173] = shuffle_encrypt_v2Pairing.G1Point(
        16464415652842856684650532277602314258336803187897417365536734652578243311878,
        13464999934436336728308808100122497082171710178049534949548547796469771140396
      );
    
      ic[174] = shuffle_encrypt_v2Pairing.G1Point(
        11241865047274203745163868069877475307936156501013573131313484492438809120589,
        1228683038519671997065714717700251628785662962483609727565597262144508285342
      );
    
      ic[175] = shuffle_encrypt_v2Pairing.G1Point(
        17209854542419902696629933606122902923041748951736641204508246313038425365140,
        19985300200908255764954332175079327312133753464303457261727615393445463227490
      );
    
      ic[176] = shuffle_encrypt_v2Pairing.G1Point(
        2021696700808568377348324826053119989730635265470248301010180982625927379241,
        9990310836388039560219336717811744850954665401497688348735849458868959537486
      );
    
      ic[177] = shuffle_encrypt_v2Pairing.G1Point(
        8546367320797722280260000272335882657324409100464082899605936217369022063992,
        14291073606631805938166236182939997477821291272810708754299766268952114097485
      );
    
      ic[178] = shuffle_encrypt_v2Pairing.G1Point(
        900632164525458690279148873630023168831740909708622258707209322552876683489,
        15733491381324314588384153753113973904749451457649246934626346292671771857317
      );
    
      ic[179] = shuffle_encrypt_v2Pairing.G1Point(
        3042703031839456515765146462373835850031215496526225284248051925785956712082,
        12949873785945377773192715395728401813996005474330484529105289392924027273342
      );
    
      ic[180] = shuffle_encrypt_v2Pairing.G1Point(
        11455860008041506863380583906944183260396790148836851495310070418311044701209,
        5099625647037819123836283949142330034555522746924482554250026761725662867695
      );
    
      ic[181] = shuffle_encrypt_v2Pairing.G1Point(
        14730622871599280267948220834555288023680766884108128066402268321047095103704,
        10208163684659868236636949560345923406146979444412373325678186800389122473269
      );
    
      ic[182] = shuffle_encrypt_v2Pairing.G1Point(
        20388625604080766118162236373123204525050502612527871609973163662007351591294,
        20009319684622539734823258085749315878539623121841927968825488236989286783303
      );
    
      ic[183] = shuffle_encrypt_v2Pairing.G1Point(
        8062075612936162296821597806318444692209866391946445595009258850420197031950,
        18954484370626253516201475870708006900595974384920292860881329969249686148461
      );
    
      ic[184] = shuffle_encrypt_v2Pairing.G1Point(
        2680954136700826937545301590094841445646680136800409259275911839513561732308,
        2659439369422799665122072887642432058792580996556098699091343303165283845556
      );
    
      ic[185] = shuffle_encrypt_v2Pairing.G1Point(
        21490538904603814982633210650053962448780938195665458558188745284673374490238,
        9712827486969892245451722952542453752503568331321988956506268945382090649715
      );
    
      ic[186] = shuffle_encrypt_v2Pairing.G1Point(
        6390387404826224078600280193973165612921231875576993820435463434993689459977,
        3696116860596647421737327799134735322357948052806219493942705924293931727700
      );
    
      ic[187] = shuffle_encrypt_v2Pairing.G1Point(
        7280351234530015637254114656411408916411584706310279602453841737479216731830,
        11537520264769926372669025338448225627743802402150342960163583664660014760195
      );
    
      ic[188] = shuffle_encrypt_v2Pairing.G1Point(
        14575260873629912910264423525803549376986455662395552291985022126121183806985,
        13720872806862139105750365131025318226317337428064718359265071181234764667081
      );
    
      ic[189] = shuffle_encrypt_v2Pairing.G1Point(
        7051224885076117072832864482687135216480016241344350066607339707137123537703,
        11913931127413353089503572179922564762847597386482853271517516550653198977659
      );
    
      ic[190] = shuffle_encrypt_v2Pairing.G1Point(
        10406870218395107178399645494109049603084055463330555697048153532299713857563,
        13292819463993343272977782216201544174877117366158668136573798513522210800994
      );
    
      ic[191] = shuffle_encrypt_v2Pairing.G1Point(
        16962474651630675331363081826356762467707759990388311703358240339744100410502,
        14420111915185320128640241266673508403702313995221698449153878518215510201732
      );
    
      ic[192] = shuffle_encrypt_v2Pairing.G1Point(
        2773709960656395890804489344762580596435157869453960788884162800777340552324,
        6801866715056895620778777232531984555779528599630937057878601680552869723069
      );
    
      ic[193] = shuffle_encrypt_v2Pairing.G1Point(
        16764291758769983424736293534704590424525964617750771516821234420113071338737,
        15745325182907003190611028982005396843592571450562568299536105869421824354407
      );
    
      ic[194] = shuffle_encrypt_v2Pairing.G1Point(
        12836820726926083509164941864822478138916790988892504697106806255184351407478,
        15199696228804255084976115019468764697109971525390535426799789025675335425020
      );
    
      ic[195] = shuffle_encrypt_v2Pairing.G1Point(
        168279530767045803918864628370287394472290256265277652743845128735141688442,
        3407188026064454930727761861851120975970244039278483122016342241982463807720
      );
    
      ic[196] = shuffle_encrypt_v2Pairing.G1Point(
        11186167119783044794479181067844325020937747693301499098311321911550825946251,
        4738045157839791243210943950971036941463737083125936008403634036636803380264
      );
    
      ic[197] = shuffle_encrypt_v2Pairing.G1Point(
        3673702767668675414655149632757068527938512788294032365114071542427946080914,
        12328860257115220201024170034232948860308171308474551920009581001799160483669
      );
    
      ic[198] = shuffle_encrypt_v2Pairing.G1Point(
        19884491603171379877156261994494789159754151658687626874102305745332008224707,
        14490288042735140670493507637104090424379316210485757301661829073149827530637
      );
    
      ic[199] = shuffle_encrypt_v2Pairing.G1Point(
        19821990498569632968934755884756510584448325438080671561520023641375840823670,
        5375689472959770290396399317394454633711706986593377413744562458770161350715
      );
    
      ic[200] = shuffle_encrypt_v2Pairing.G1Point(
        14934808389898774619441862330494805439124265400080523216115606740592622054999,
        10335450995532544127582676271567620139127745781683721396545814699418812891167
      );
    
      ic[201] = shuffle_encrypt_v2Pairing.G1Point(
        4923222163758756963878460386845320563287757854520992175979212766389569465647,
        11608024644215760247223457697756000828271455534270264409747290678264551518708
      );
    
      ic[202] = shuffle_encrypt_v2Pairing.G1Point(
        11324143099311898255539604329759069365934580253989898510731378306174005647742,
        6004231192989707995506627439075821639951299225152452025018791490174562679635
      );
    
      ic[203] = shuffle_encrypt_v2Pairing.G1Point(
        1098625637401407815174082403336975811983488145685002980922414796106184652019,
        6642373903300663970555962746617911709825923880951395153467664116636161554378
      );
    
      ic[204] = shuffle_encrypt_v2Pairing.G1Point(
        21792712529258245125143979956856399599590664318173377031782855752825875606049,
        20562059447412838854914566784447699648465620230941943141221623526009861823883
      );
    
      ic[205] = shuffle_encrypt_v2Pairing.G1Point(
        9783557205817215986996032061098120994293361505317718436593327714680115811387,
        6839605947643100929171434004517591621059281682600094128641929686788811039674
      );
    
      ic[206] = shuffle_encrypt_v2Pairing.G1Point(
        14517378723891384230359460270995038948307897703652101449847254853683093871993,
        3225881491024949351698105395731998803624805532261073946820295209095178045635
      );
    
      ic[207] = shuffle_encrypt_v2Pairing.G1Point(
        18766186056232473456093488370801298479917182784716101920782388000380149976336,
        3526760158030589841644072781536880497645618808723371275792273904134241355299
      );
    
      ic[208] = shuffle_encrypt_v2Pairing.G1Point(
        20206767345479840316612573541706791127733103935968839608323161254599024922696,
        17161967012311455130509862498990901090635945063803466288782684510420581789112
      );
    
      ic[209] = shuffle_encrypt_v2Pairing.G1Point(
        19496121190455257879215736471477532227935907094298780568509473785145589327213,
        2602143876538017806482689952437454547306993902447097103330850889897873815714
      );
    
      ic[210] = shuffle_encrypt_v2Pairing.G1Point(
        14068874189363015240086472140811069368589833265216355593693266145843863793558,
        19120152670678381303984494980607963427837008758657684483439354421680135169593
      );
    
      ic[211] = shuffle_encrypt_v2Pairing.G1Point(
        2297344924038394139886854939931669226794155997436938192943016421209034198811,
        1980920160741210634486185199235534550892207255493321227101583682624912992019
      );
    
      ic[212] = shuffle_encrypt_v2Pairing.G1Point(
        19637431707047652221544236783736114018318126889846201551059121377766758331262,
        3094171941455935756387101286814291777079251212846497098802276078855475844007
      );
    
      ic[213] = shuffle_encrypt_v2Pairing.G1Point(
        10720145864473833467610235774230322999438612263668970426460083658940576295818,
        3091304636214177338083638001422509174696284815083150641429829764027165084971
      );
    
      ic[214] = shuffle_encrypt_v2Pairing.G1Point(
        17290226806928919444855673294012777697894314578096202237249319099936706636100,
        16011687577066348101877920889785944777883791324515340570715083068961073766096
      );
    
      ic[215] = shuffle_encrypt_v2Pairing.G1Point(
        9436474079981508721538285419738670850869882615146825526636336750677295166070,
        17415837802945409559815389704914867334578282980904822787826611349676962827275
      );
  }
}

contract shuffle_encrypt_v2Verifier {
  using shuffle_encrypt_v2Pairing for *;
  
  struct VerifyingKey {
    shuffle_encrypt_v2Pairing.G1Point alfa1;
    shuffle_encrypt_v2Pairing.G2Point beta2;
    shuffle_encrypt_v2Pairing.G2Point gamma2;
    shuffle_encrypt_v2Pairing.G2Point delta2;
    shuffle_encrypt_v2Pairing.G1Point[] IC;
  }

  struct Proof {
    shuffle_encrypt_v2Pairing.G1Point A;
    shuffle_encrypt_v2Pairing.G2Point B;
    shuffle_encrypt_v2Pairing.G1Point C;
  }

  function verifyingKey() internal pure returns (VerifyingKey memory vk) {
    vk.alfa1 = shuffle_encrypt_v2Pairing.G1Point(
      14378794661994809316668936077887579852844330409586136188493910229510707683568,
      19007180918058273234125706522281291487787880146734549337345180962710738215208
    );

    vk.beta2 = shuffle_encrypt_v2Pairing.G2Point(
      [5920706861016946300912146506670818945013737603659177373891149557636543490740, 12055325713222300848813253111985210672218263044214498326157766255150057128762],
      [9700420230412290932994502491200547761155381189822684608735830492099336040170, 14277278647337675353039880797101698215986155900184787257566473040310971051502]
    );

    vk.gamma2 = shuffle_encrypt_v2Pairing.G2Point(
      [11559732032986387107991004021392285783925812861821192530917403151452391805634, 10857046999023057135944570762232829481370756359578518086990519993285655852781],
      [4082367875863433681332203403145435568316851327593401208105741076214120093531, 8495653923123431417604973247489272438418190587263600148770280649306958101930]
    );

    vk.delta2 = shuffle_encrypt_v2Pairing.G2Point(
      [6255023997885477594105402240334092859164325514804895533854117423365536584233, 13625818368033285905326362125339292623319029318441393005341703616531081056131],
      [3420447199536320581304600857679776758918564530314965694305475595824792383876, 13578616137845788215735960013448481866409823648154819181518609036036837223932]
    );      

    vk.IC = new shuffle_encrypt_v2Pairing.G1Point[](216);
    shuffle_encrypt_v2Pairing.G1Point[] memory p1 = VerifyingKeyIC0.getIC();
    for (uint i = 0; i < 108; ++i) {
      vk.IC[i] = p1[i];
    }
    shuffle_encrypt_v2Pairing.G1Point[] memory p2 = VerifyingKeyIC1.getIC();
    for (uint i = 0; i < 108; ++i) {
      vk.IC[108 + i] = p2[108 + i];
    }
  }

  /// @dev Verifies a Semaphore proof. Reverts with InvalidProof if the proof is invalid.
  function verifyProof(
    uint[2] memory a,
    uint[2][2] memory b,
    uint[2] memory c,
    uint[215] memory input
  ) public view {
    // If the values are not in the correct range, the shuffle_encrypt_v2Pairing contract will revert.
    Proof memory proof;
    proof.A = shuffle_encrypt_v2Pairing.G1Point(a[0], a[1]);
    proof.B = shuffle_encrypt_v2Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
    proof.C = shuffle_encrypt_v2Pairing.G1Point(c[0], c[1]);

    VerifyingKey memory vk = verifyingKey();

    // Compute the linear combination vk_x of inputs times IC
    if (input.length + 1 != vk.IC.length) revert shuffle_encrypt_v2Pairing.InvalidProof();
    shuffle_encrypt_v2Pairing.G1Point memory vk_x = vk.IC[0];
    for (uint i = 0; i < input.length; i++) {
      vk_x = shuffle_encrypt_v2Pairing.addition(vk_x, shuffle_encrypt_v2Pairing.scalar_mul(vk.IC[i+1], input[i]));
    }

    // Check pairing
    shuffle_encrypt_v2Pairing.G1Point[] memory p1 = new shuffle_encrypt_v2Pairing.G1Point[](4);
    shuffle_encrypt_v2Pairing.G2Point[] memory p2 = new shuffle_encrypt_v2Pairing.G2Point[](4);
    p1[0] = shuffle_encrypt_v2Pairing.negate(proof.A);
    p2[0] = proof.B;
    p1[1] = vk.alfa1;
    p2[1] = vk.beta2;
    p1[2] = vk_x;
    p2[2] = vk.gamma2;
    p1[3] = proof.C;
    p2[3] = vk.delta2;
    shuffle_encrypt_v2Pairing.pairingCheck(p1, p2);
  }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
pragma experimental ABIEncoderV2;

struct ShuffleProof {
    uint256[2] a;
    uint256[2][2] b;
    uint256[2] c;
    uint256[215] inputs;
}

struct DecryptProof {
    uint256[2] a;
    uint256[2][2] b;
    uint256[2] c;
    uint256[8] inputs;
}

interface IVerifier {
    function INVALID_INDEX()
        external
        view
        returns (uint256);

    function getDecryptCounts(uint256[] calldata cardIndex, uint256 boardId)
        external
        view
        returns (uint256[] memory);

    function getShuffleProof(uint256 boardId) external view returns (ShuffleProof memory);

    function getShuffleProofByIndex(uint256 i, uint256 boardId)
        external
        view
        returns (ShuffleProof memory);

    function getShuffleCount(uint256 boardId) external view returns (uint256);

    function getDecryptProof(uint256 cardIndex, uint256 boardId)
        external
        view
        returns (DecryptProof memory);

    function getDecryptProofs(uint256[] calldata indexes, uint256 boardId)
        external
        view
        returns (DecryptProof[] memory);

    function batchSearchDeck(uint256[] calldata cardIndexes, uint256 boardId)
        external
        view
        returns (uint256[] memory cards);

    function searchDeck(uint256 cardIndex, uint256 boardId) external view returns (uint256);

    function verifyShuffleAndSave(ShuffleProof calldata proof, uint256 boardId)
        external
        returns (bool);

    function verifyDecryptAndSave(
        uint256 cardIndex,
        DecryptProof calldata proof,
        uint256 boardId
    ) external returns (bool);
}

// SPDX-License-Identifier: MIT

/**
 * This contract contain all the cryptographic logic
 */
pragma solidity ^0.8.0;
pragma experimental ABIEncoderV2;

import "@naivetester/poseidon-zk-circuits/contracts/shuffle_encrypt_v2_verifier.sol";
import "@naivetester/poseidon-zk-circuits/contracts/decrypt_verifier.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./IVerifier.sol";

interface IEncryptVerifier {
    function verifyProof(
        uint256[2] memory a,
        uint256[2][2] memory b,
        uint256[2] memory c,
        uint256[215] memory input
    ) external view;
}

interface IDecryptVerifier {
    function verifyProof(
        uint256[2] memory a,
        uint256[2][2] memory b,
        uint256[2] memory c,
        // public decrypt signals contain 8 values.
        // 1~2 is the card value, 3~6 is the Y, 7～8 is the personal public key.
        uint256[8] memory input
    ) external view;
}

contract Verifier is Ownable, IVerifier {
    // ========================== data fields ==========================
    // the first proof has the original deck and the last one is used for generating decrypt proof
    // boardId => shuffle proofs of each round
    mapping(uint256 => ShuffleProof[]) shuffleProofs;
    // boardId => shuffle count of each round
    mapping(uint256 => uint256) public shuffleCounts;

    uint256 public constant INVALID_INDEX = 9999;

    // boardId => (card index => decrypt proofs)
    mapping(uint256 => mapping(uint256 => DecryptProof)) decryptProofs;
    // boardId => (card index => decrypt count)
    mapping(uint256 => mapping(uint256 => uint256)) decryptCounts;

    address public boardManager;

    // type names is ugly though
    shuffle_encrypt_v2Verifier public encrypt_verifier;
    decryptVerifier public decrypt_verifier;

    // ========================== Events ==========================
    event BoardManagerSet(address indexed manager);

    // ========================== Modifiers ==========================
    modifier onlyBoardManager() {
        require(msg.sender == boardManager, "only board manager");
        _;
    }

    constructor(
        shuffle_encrypt_v2Verifier encrypt_verifier_,
        decryptVerifier decrypt_verifier_
    ) {
        encrypt_verifier = encrypt_verifier_;
        decrypt_verifier = decrypt_verifier_;
    }

    function setBoardManager(address boardManager_) external onlyOwner {
        require(boardManager_ != address(0), "empty address");
        boardManager = boardManager_;
        emit BoardManagerSet(boardManager);
    }

    function getDecryptCounts(uint256[] calldata cardIndexes, uint256 boardId)
        external
        view
        virtual
        override
        returns (uint256[] memory counts)
    {
        counts = new uint256[](cardIndexes.length);
        for (uint256 i = 0; i < cardIndexes.length; i++) {
            counts[i] = decryptCounts[boardId][cardIndexes[i]];
        }
    }

    // return the latest shuffle proof
    function getShuffleProof(uint256 boardId)
        public
        view
        virtual
        override
        returns (ShuffleProof memory)
    {
        ShuffleProof[] storage currentShuffleProofs = shuffleProofs[boardId];
        return currentShuffleProofs[currentShuffleProofs.length - 1];
    }

    function getShuffleProofByIndex(uint256 i, uint256 boardId)
        external
        view
        virtual
        override
        returns (ShuffleProof memory)
    {
        return shuffleProofs[boardId][i];
    }

    function getShuffleCount(uint256 boardId)
        external
        view
        virtual
        override
        returns (uint256)
    {
        return shuffleCounts[boardId];
    }

    function getDecryptProof(uint256 cardIndex, uint256 boardId)
        public
        view
        virtual
        override
        returns (DecryptProof memory)
    {
        return decryptProofs[boardId][cardIndex];
    }

    function getDecryptProofs(uint256[] calldata indexes, uint256 boardId)
        external
        view
        override
        returns (DecryptProof[] memory)
    {
        require(indexes.length > 0, "invalid index count");
        DecryptProof[] memory proofs = new DecryptProof[](indexes.length);
        for (uint256 i = 0; i < indexes.length; ++i) {
            proofs[i] = getDecryptProof(indexes[i], boardId);
        }
        return proofs;
    }

    function batchSearchDeck(uint256[] calldata cardIndexes, uint256 boardId)
        external
        view
        virtual
        override
        returns (uint256[] memory cards)
    {
        cards = new uint256[](cardIndexes.length);
        for (uint256 i = 0; i < cardIndexes.length; ++i) {
            cards[i] = searchDeck(cardIndexes[i], boardId);
        }
    }

    // cardIndex: card index in shuffled deck
    function searchDeck(uint256 cardIndex, uint256 boardId)
        public
        view
        virtual
        override
        returns (uint256)
    {
        DecryptProof storage proof = decryptProofs[boardId][cardIndex];
        uint256[8] storage decryptPublicSignals = proof.inputs;
        ShuffleProof[] storage currentShuffleProofs = shuffleProofs[boardId];
        uint256[215] storage initShuffleProofPublicSignals = currentShuffleProofs[0].inputs;
        // 52: card number
        // 55: 52 card number + 1 dummy input + 2 aggregated key
        for (uint256 i = 0; i < 52; i++) {
            if (
                initShuffleProofPublicSignals[55 + i] ==
                decryptPublicSignals[0]
            ) {
                return i;
            }
        }
        return INVALID_INDEX;
    }

    // verify shuffle proof with the last saved deck, and going on
    function verifyShuffleAndSave(ShuffleProof calldata proof, uint256 boardId)
        external
        virtual
        override
        onlyBoardManager
        returns (bool)
    {
        require(
            _shuffleSanityCheck(proof, boardId),
            "invalid card values after shuffle, do you want to scam us?"
        );
        // will revert if verify failed
        encrypt_verifier.verifyProof(proof.a, proof.b, proof.c, proof.inputs);

        // save
        shuffleProofs[boardId].push(proof);
        shuffleCounts[boardId]++;
        return true;
    }

    //
    function verifyDecryptAndSave(
        uint256 cardIndex,
        DecryptProof calldata proof,
        uint256 boardId
    ) external virtual override onlyBoardManager returns (bool) {
        require(
            _decryptSanityCheck(cardIndex, proof, boardId),
            "invalid decrypt proof, do you want to scam us?"
        );
        decrypt_verifier.verifyProof(proof.a, proof.b, proof.c, proof.inputs);

        decryptProofs[boardId][cardIndex] = proof;
        decryptCounts[boardId][cardIndex]++;

        return true;
    }

    // ========================== internals ==========================
    function _shuffleSanityCheck(ShuffleProof calldata newProof, uint256 boardId)
        internal
        view
        returns (bool)
    {
        // to make it convenient, we make the first user to assign the init deck
        // and skip the checking
        if (shuffleCounts[boardId] != 0) {
            // we need to check the prover is not bullshitting us by checking
            // part of the current public inputs are equal to part of old public inputs
            ShuffleProof[] storage currentRoundShuffleProofs = shuffleProofs[
                boardId
            ];
            uint256[215] storage oldInputs = currentRoundShuffleProofs[
                currentRoundShuffleProofs.length - 1
            ].inputs;

            for (uint256 i = 0; i < 104; ++i) {
                if (oldInputs[i + 107] != newProof.inputs[i + 3]) {
                    return false;
                }
            }

            for (uint256 i = 0; i < 2; ++i) {
                if (oldInputs[213 + i] != newProof.inputs[i + 211]) {
                    return false;
                }
            }

            return true;
        }
        return true;
    }

    function _decryptSanityCheck(
        uint256 cardIndex,
        DecryptProof calldata newProof,
        uint256 boardId
    ) internal view returns (bool) {
        uint256[8] memory newInputs = newProof.inputs;
        if (decryptCounts[boardId][cardIndex] != 0) {
            uint256[8] storage currentInputs = decryptProofs[boardId][cardIndex].inputs;
            require(
                newInputs[2] == currentInputs[2] &&
                newInputs[3] == currentInputs[3] &&
                newInputs[4] == currentInputs[0] &&
                newInputs[5] == currentInputs[1],
                "Decrypt input mismatch with last decrypt"
            );
        }
        return true;
    }
}